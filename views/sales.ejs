<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Produtos</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap');
    </style>

    <style>
        body {
            margin: 0;
            font-family: 'Montserrat', sans-serif;
        }

        #menu {
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: 200px;
            background-color: #fff;
            color: #CE67B7;
            padding: 10px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
        }

        #menu a {
            color: #000;
            text-decoration: none;
            margin: 0;
            padding: 12px 15px;
            display: block;
            align-items: center;
            border-radius: 5px;
            transition: background-color 0.3s, color 0.3s;
            font-size: 18px;
            margin-bottom: -10px;
        }

        #menu h2 {
            margin-bottom: 20px;
            padding: 15px;
            font-size: 24px;
            font-weight: bold;
        }

        #menu a i {
            margin-right: 30px;
            transition: color 0.3s;
        }

        #menu a:hover {
            background-color: #CE67B7;
            color: white;
        }

        #menu a.active {
            background-color: #CE67B7;
            color: white;
            border-radius: 8px;
            font-weight: bold;
        }

        #menu a.active i {
            color: white;
        }

        #menu a.active .menu-icon {
            content: url("/images/home 1.svg");
        }

        #menu a.active .menu-icon2 {
            content: url("/images/vend 1.svg");
        }

        #menu a.active .menu-icon3 {
            content: url("/images/prod 1.svg");
        }

        #menu a.active .menu-icon4 {
            content: url("/images/client 1.svg");
        }

        #menu a.active .menu-icon5 {
            content: url("/images/vendedor 1.svg");
        }

        #menu a.active .menu-icon6 {
            content: url("/images/sobre 1.svg");
        }

        #menu a img {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }

        .content {
            margin-left: 270px;
            padding: 20px;
        }

        .form-container button {
            padding: 12px 20px;
            background-color: #CE67B7;
            /* Cor de fundo do botão */
            color: white;
            border: none;
            border-radius: 8px;
            /* Bordas arredondadas */
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: background-color 0.3s, transform 0.3s;
            width: 25%;
            /* Ocupa toda a largura disponível */
            margin-top: 20px;
        }

        .form-container button:hover {
            background-color: #d133e3;
            /* Cor de fundo quando o mouse passa por cima */
            transform: scale(1.05);
            /* Efeito de aumento */
        }

        .form-container button:focus {
            outline: none;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
            /* Efeito de foco */
        }

        .form-container {
            margin: 20px 0;
        }


        .sale-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .sale-item {
            border: 1px solid #ccc;
            border-radius: 10px;
            padding: 15px;
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .sale-item:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        .sale-item img {
            width: 150px;
            /* Defina um tamanho fixo para todas as imagens */
            height: 150px;
            /* Mantém a proporção quadrada */
            object-fit: cover;
            /* Garante que a imagem se ajuste sem distorção */
            border-radius: 8px;
            /* Bordas arredondadas para um visual mais moderno */
        }


        .sale-item p {
            margin: 5px 0;
            font-size: 14px;
        }

        .sale-item button {
            padding: 8px 15px;
            background-color: #e942f5;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .sale-item button:hover {
            background-color: #d133e3;
        }

        /* Estilizando os campos de texto */
        input[type="text"],
        input[type="number"],
        textarea {
            background-color: white;
            border: none;
            padding: 15px;
            margin-bottom: 10px;
            width: 100%;
            border-radius: 5px;
            outline: none;
            width: 100%;
            max-height: 200px;
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
            font-family: 'Montserrat', sans-serif;
            font-size: 16px;
            box-sizing: border-box;
            resize: vertical;

        }

        textarea {
            max-height: 200px;
            min-height: 100px;
        }

        /* Estilo para o botão deletar */
        button.delete {
            background-color: transparent;
            /* Sem fundo */
            background-color: #CE67B7;
            /* Cor do texto (pode ser a cor que você desejar) */
            border: none;
            /* Sem borda */
            cursor: pointer;
            font-size: 16px;
            transition: color 0.3s, transform 0.3s;
            /* Efeito de transição */
        }

        button.delete:focus {
            outline: none;
        }
    </style>
</head>
<body>
    <div id="menu">
        <h2>La Belle Essence</h2>
        <a href="/" id="home" onclick="changeIcon(this)">
            <img src="/images/home 2.svg" alt="Ícone Inicial" class="menu-icon"> Home
        </a><br><br>
        <a href="/vendas" id="vendas" onclick="changeIcon(this)">
            <img src="/images/vend 2.svg" alt="Ícone Vendas" class="menu-icon2"> Vendas
        </a><br><br>
        <a href="/produtos" id="produtos" onclick="changeIcon(this)">
            <img src="/images/prod 2.svg" alt="Ícone Produtos" class="menu-icon3"> Perfumes
        </a><br><br>
        <a href="/clientes" id="clientes" onclick="changeIcon(this)">
            <img src="/images/client 2.svg" alt="Ícone Clientes" class="menu-icon4"> Clientes
        </a><br><br>
        <a href="/vendedores" id="vendedores" onclick="changeIcon(this)">
            <img src="/images/vendedor 2.svg" alt="Ícone Vendedores" class="menu-icon5"> Vendedores
        </a><br><br>
        <a href="/sobre" id="sobre" onclick="changeIcon(this)">
            <img src="/images/sobre 2.svg" alt="Ícone Sobre" class="menu-icon6"> Sobre
        </a><br><br>
    </div>

    <div class="content">
        <img src="/images/cart.svg" alt="Ícone Carrinho" width="80" height="auto"> <h1>Carrinho de Compras</h1>

        <!-- Formulário de criação de venda -->
        <div class="form-container">
            <h2>Criar Venda</h2>
            <form id="createSaleForm">
                <input type="number" name="idCliente" placeholder="ID do Cliente" required>
                <input type="number" name="idVendedor" placeholder="ID do Vendedor" required>
        
                <h3>Itens da Venda</h3>
                <div id="itemFields">
                    <!-- Campos para o primeiro item -->
                    <div class="item">
                        <input type="number" name="idProduto" placeholder="ID do Produto" required>
                        <input type="number" name="quantidade" placeholder="Quantidade" required>
                        <input type="number" name="precoUnitario" placeholder="Preço Unitário" step="0.01" required>
                        <button type="button" onclick="removeItem(this)">Remover Item</button>
                    </div>
                </div>
                <button type="button" onclick="addItem()">Adicionar Item</button>
        
                <button type="submit">Criar Venda</button>
            </form>
        </div>

        <!-- Lista de vendas -->
        <div class="sale-list" id="saleList">
            <% if (vendas.length > 0) { %>
                <% vendas.forEach(venda => { %>
                    <div class="sale-item">
                        <p><strong>Venda ID: <%= venda.id %></strong></p>
                        <p>Cliente: <%= venda.cliente.nome %></p>
                        <p>Vendedor: <%= venda.vendedor.nome %></p>
                        <p>Data: <%= venda.dataVenda.toLocaleString() %></p>
                        <p>Total: R$ <%= venda.total.toFixed(2) %></p>
                        <ul>
                            <% venda.itensVenda.forEach(item => { %>
                                <li>
                                    Produto: <%= item.produto.nome %> - 
                                    Quantidade: <%= item.quantidade %> - 
                                    Preço Unitário: R$ <%= item.precoUnitario.toFixed(2) %>
                                </li>
                            <% }); %>
                        </ul>
                        <button onclick="deleteSale(venda.id)">Deletar</button>
                    </div>
                <% }); %>
            <% } else { %>
                <p>Nenhuma venda encontrada.</p>
            <% } %>
        </div>
    </div>

    <script>
        const apiUrl = '/vendas';

        // Função para listar vendas
        async function fetchSales() {
            const response = await fetch(apiUrl);
            const sales = await response.json();
            const saleList = document.getElementById('saleList');
            saleList.innerHTML = '';

            sales.forEach(sale => {
                const saleItem = document.createElement('div');
                saleItem.className = 'sale-item';
                saleItem.innerHTML = `
                    <p><strong>Venda ID: ${sale.id}</strong></p>
                    <p>Cliente: ${sale.cliente.nome}</p>
                    <p>Vendedor: ${sale.vendedor.nome}</p>
                    <p>Data: ${new Date(sale.dataVenda).toLocaleString()}</p>
                    <p>Total: R$ ${sale.total.toFixed(2)}</p>
                    <ul>
                        ${sale.itensVenda.map(item => `
                            <li>Produto: ${item.produto.nome} - 
                                Quantidade: ${item.quantidade} - 
                                Preço Unitário: R$ ${item.precoUnitario.toFixed(2)}
                            </li>
                        `).join('')}
                    </ul>
                    <button onclick="deleteSale(${sale.id})">Deletar</button>
                `;
                saleList.appendChild(saleItem);
            });
        }

        // Função para adicionar campos para um novo item
    function addItem() {
        const itemFields = document.getElementById('itemFields');

        const newItem = document.createElement('div');
        newItem.className = 'item';
        newItem.innerHTML = `
            <input type="number" name="idProduto" placeholder="ID do Produto" required>
            <input type="number" name="quantidade" placeholder="Quantidade" required>
            <input type="number" name="precoUnitario" placeholder="Preço Unitário" step="0.01" required>
            <button type="button" onclick="removeItem(this)">Remover Item</button>
        `;

        itemFields.appendChild(newItem);
    }

    // Função para remover campos de um item
    function removeItem(button) {
        button.parentElement.remove();
    }

    document.getElementById('createSaleForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        // Capturar os valores de itensVenda separadamente
        const itemElements = document.querySelectorAll('#itemFields .item');
        const itensVenda = Array.from(itemElements).map(item => ({
            idProduto: parseInt(item.querySelector('[name="idProduto"]').value),
            quantidade: parseInt(item.querySelector('[name="quantidade"]').value),
            precoUnitario: parseFloat(item.querySelector('[name="precoUnitario"]').value),
        }));

        // Enviar para a API
        try {
            const response = await fetch('/api/vendas', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    idCliente: parseInt(formData.get('idCliente')),
                    idVendedor: parseInt(formData.get('idVendedor')),
                    itensVenda: itensVenda
                }),
            });

            if (!response.ok) {
                throw new Error(`Erro na API: ${response.status} - ${response.statusText}`);
            }

            e.target.reset();
            document.getElementById('itemFields').innerHTML = ''; // Limpa os campos
            addItem(); // Adiciona o primeiro campo vazio
        } catch (error) {
            console.error('Erro ao criar venda:', error);
            alert('Erro ao criar a venda. Tente novamente.');
        }
    });

        // Função para deletar venda
        async function deleteSale(id) {
            await fetch(`${apiUrl}/${id}`, { method: 'DELETE' });
            fetchSales();
        }

        // Carrega as vendas ao iniciar
        fetchSales();
    </script>
    <script src="/js/script.js"></script>
</body>
</html>